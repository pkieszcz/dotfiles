"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
"                                                                              "
"                       __   _ _ _ __ ___  _ __ ___                            "
"                       \ \ / / | '_ ` _ \| '__/ __|                           "
"                        \ V /| | | | | | | | | (__                            "
"                         \_/ |_|_| |_| |_|_|  \___|                           "
"                                                                              "
"                                                                              "
"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
"
" Be iMproved
set nocompatible
" check whether vim-plug is installed and install it if necessary
let plugpath = expand('<sfile>:p:h'). '/autoload/plug.vim'
if !filereadable(plugpath)
    if executable('curl')
        let plugurl = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        call system('curl -fLo ' . shellescape(plugpath) . ' --create-dirs ' . plugurl)
        if v:shell_error
            echom "Error downloading vim-plug. Please install it manually.\n"
            exit
        endif
    else
        echom "vim-plug not installed. Please install it manually or install curl.\n"
        exit
    endif
endif
" set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')

"-------------------=== Code/Project navigation ===-------------
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
"-------------------=== Colors ===------------------------------
Plug 'mhartington/oceanic-next'

"-------------------=== Airline ===-----------------------------
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

"-------------------=== Lint ===--------------------------------
"Plug 'w0rp/ale'

"-------------------=== Git ===---------------------------------
"Plug 'tpope/vim-fugitive'
"Plug 'mhinz/vim-signify'
Plug 'airblade/vim-gitgutter'

"-------------------=== Other ===-------------------------------
"if has('nvim')
  " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
  " Plug 'Shougo/deoplete.nvim'
  " Plug 'roxma/nvim-yarp'
  " Plug 'roxma/vim-hug-neovim-rpc'
" endif
"Plug 'tbodt/deoplete-tabnine', { 'do': './install.sh' }
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'scrooloose/nerdcommenter'
"Plug 'jiangmiao/auto-pairs'
"Plug 'junegunn/vim-easy-align'
"Plug 'ntpeters/vim-better-whitespace'
"Plug 'nathanaelkane/vim-indent-guides'
"Plug 'Yggdroot/indentLine'
"Plug 'adelarsq/vim-matchit'
"Plug 'luochen1990/rainbow'
"Plug 'tpope/vim-surround'
"Plug 'easymotion/vim-easymotion'
"Plug 'wikitopian/hardmode'
"-------------------=== Languages ===---------------------------
Plug 'sheerun/vim-polyglot'

" All of your Plugs must be added before the following line
call plug#end()

filetype plugin indent on    " required
filetype plugin on

"=====================================================
"" General settings
"=====================================================
set secure                           " Security
set modelines=0

if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

syntax on                            " syntax highlight
set nobackup
set noswapfile

set t_Co=256                         " set 256 colors
set background=dark                  " background

if (has('termguicolors'))
  set termguicolors
endif

let base16colorspace=256             " Access colors present in 256 colorspace
colorscheme OceanicNext              "set color scheme

set clipboard^=unnamed,unnamedplus   " use system clipboard

set number                           " show hybrid line number
set history=10000                    " how many lines of history VIM has to remember
set report=0                         " always show report messages

set ttyfast                          " terminal acceleration
set lazyredraw

set backspace=indent,eol,start       " OSX stupid backspace fix

set encoding=utf-8                   " utf-8 by default"

set autoread                         "Automatically re-read file if a change was detected outside of vim
set magic
set title

set novisualbell
set noerrorbells

set nowrap
set showcmd
set noshowmode

" Force saving files that require root permission
cnoremap w!! w !sudo tee > /dev/null %

inoremap jk <ESC>
"=====================================================
"" Search settings
"=====================================================
set hlsearch                    " highlight searches
set incsearch                   " incremental searches as we type
set smartcase                   " no ignorecase if Uppercase char present
set ignorecase                  " ignore case when searching"

"=====================================================
"" CursorLine
"=====================================================
set cursorline
set cursorcolumn
hi CursorLine cterm=underline gui=underline

"=====================================================
"" Split settings
"=====================================================
set splitbelow
set splitright

" Enable folding
set foldmethod=indent
set foldlevel=99
" Enable folding with the spacebar
nnoremap <space> za

" Split movment with Crtl-h/j/k/l
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"=====================================================
"" Tabs settings
"=====================================================
set tabstop=4
set shiftwidth=4
set smarttab
set expandtab

"=====================================================
"" Python settings
"=====================================================
let g:python_host_prog = '/Users/pkieszcz/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/Users/pkieszcz/.pyenv/versions/neovim3/bin/python'

au BufNewFile,BufRead *.py set tabstop=4 softtabstop=4 shiftwidth=4 textwidth=79 expandtab autoindent fileformat=unix
" 80 and 120 char limit
let &colorcolumn=join(range(81,999),',')
highlight colorcolumn ctermbg=236 guibg=#212121
let &colorcolumn='80,'.join(range(120,999),',')

"==============================================================================
"" Plugins config
"==============================================================================

"=====================================================
"" scrooloose/nerdtree
"=====================================================
let NERDTreeIgnore=['\~$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']

" Open NERDTree on startup 
autocmd VimEnter * if !argc() | NERDTree | endif
"autocmd VimEnter * NERDTree
"autocmd VimEnter * wincmd p

" Close vim if NERDtree if there is no files
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Bind Ctrl-n to toggle
map <C-n> :NERDTreeToggle<CR>

let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NerdTreeStatusline = ''

"=====================================================
"" Xuyuanp/nerdtree-git-plugin
"=====================================================
let g:NERDTreeGitStatusIndicatorMapCustom= {
     \ 'Modified'  : '✹',
     \ 'Staged'    : '✚',
     \ 'Untracked' : '✭',
     \ 'Renamed'   : '➜',
     \ 'Unmerged'  : '═',
     \ 'Deleted'   : '✖',
     \ 'Dirty'     : '✗',
     \ 'Clean'     : '✔︎',
     \ 'Ignored'   : '☒',
     \ 'Unknown'   : '?'
     \ }

"=====================================================
"" majutsushi/tagbar
"=====================================================
"let g:tagbar_usearrows = 1
"nmap <F8> :TagbarToggle<CR>
"autocmd VimEnter * TagbarOpen


"=====================================================
"" vim-airline/vim-airline
"=====================================================
let g:airline_theme                        = 'molokai'
let g:airline#extensions#branch#enable     = 1
let g:airline#extensions#ale#enabled       = 1
let g:airline#extensions#bufferline#enabled= 1
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1
let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['z', 'warning', 'error']]
let g:airline_section_b = airline#section#create_left(['branch'])
let g:airline_section_z = airline#section#create(['linenr'])
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_exclude_preview = 1

"=====================================================
"" 'w0rp/ale'
"=====================================================
" let g:ale_set_loclist = 1
" let g:ale_open_list = 1
" let g:ale_list_window_size = 6
" let g:ale_sign_column_always = 1
" let g:ale_sign_error = '⁉'
" let g:ale_sign_warning = '•'
" let g:ale_echo_msg_error_str = 'E'
" let g:ale_echo_msg_warning_str = 'W'
" let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" let g:ale_virtualenv_dir_names = []
" let g:ale_lint_on_text_changed = 0
" let g:ale_lint_on_save = 1
" let g:ale_lint_on_enter = 1

"=====================================================
"" 'airblade/vim-gitgutter'
"=====================================================
"let g:gitgutter_override_sign_column_highlight = 1

"=====================================================
"" 'SirVer/ultisnips'
"=====================================================
" let g:UltiSnipsExpandTrigger='<tab>'
" let g:UltiSnipsJumpForwardTrigger='<c-b>'
" let g:UltiSnipsJumpBackwardTrigger='<c-z>'

" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit='vertical'

" Disable Arrow keys in Escape mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Disable Arrow keys in Insert mode
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

"let g:rainbow_active = 1

let g:terraform_fmt_on_save=1
let g:terraform_align=1

set shell=/bin/zsh

"=====================================================
"" 'neoclide/coc.nvim'
"=====================================================
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>n  <Plug>(coc-format-selected)
nmap <leader>n  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
